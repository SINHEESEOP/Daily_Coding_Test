아래는 플랫폼(백준, 프로그래머스 등)을 **파일명에 포함**시키고, 디렉토리 구조를 간결하게 수정한 버전입니다. 또한, 플랫폼별 분리를 없애고 언어와 알고리즘/자료구조 중심으로 관리하도록 설계했습니다.

---

## **리드미 내용**

```markdown
# Coding Test Solutions

## 소개
이 디렉토리는 **코딩 테스트 문제 풀이**를 체계적으로 관리하기 위한 공간입니다.  
문제를 푼 플랫폼(예: Baekjoon, Programmers)은 **파일명에 포함**하여 관리하며,  
디렉토리 구조는 사용한 언어와 알고리즘/자료구조를 중심으로 분류합니다.

---

## 디렉토리 구조 (예시)
```
CodingTest/
├── C/
│   ├── Algorithm/
│   │   ├── Sorting/
│   │   │   ├── Baekjoon_12345_BubbleSort.c
│   │   │   └── Programmers_54321_QuickSort.c
│   │   └── Graph/
│   │       ├── Baekjoon_67890_Dijkstra.c
│   │       └── Programmers_11111_MST.c
│   └── DataStructure/
│       ├── Stack/
│       │   └── Baekjoon_98765_StackExample.c
│       └── Queue/
│           └── Programmers_87654_QueueImplementation.c
├── Java/
│   ├── Algorithm/
│   │   ├── Sorting/
│   │   │   └── Baekjoon_12345_BubbleSort.java
│   │   └── Graph/
│   │       └── Programmers_67890_DFS.java
│   └── DataStructure/
│       └── BinaryTree/
│           └── Programmers_54321_BinaryTreeExample.java
├── Python/
│   ├── Algorithm/
│   │   ├── DynamicProgramming/
│   │   │   └── Baekjoon_11111_Knapsack.py
│   │   └── BruteForce/
│   │       └── Programmers_22222_BruteForceExample.py
│   └── DataStructure/
│       └── HashTable/
│           └── Baekjoon_33333_HashMapExample.py
├── README.md
└── CONTRIBUTING.md
```

---

## 디렉토리 내용 설명
1. **언어별 디렉토리**:
   - C, Java, Python 등 문제 풀이에 사용한 언어별로 관리합니다.

2. **카테고리 분류**:
   - 각 언어 내부에서 **Algorithm**과 **DataStructure**로 문제를 구분합니다.
   - **Algorithm**: Sorting, Graph, DynamicProgramming 등.
   - **DataStructure**: Stack, Queue, BinaryTree 등.

3. **파일명 규칙**:
   - 파일명에 플랫폼과 문제 ID를 포함하여 문제 출처를 명확히 구분합니다.
   - 형식: `플랫폼_문제ID_문제이름.확장자`
   - 예:
     - `Baekjoon_12345_BubbleSort.c`
     - `Programmers_54321_QueueImplementation.java`

---

## 문제 풀이 방식
1. **파일명으로 플랫폼 구분**:
   - 플랫폼(백준, 프로그래머스 등)은 파일명에 포함되므로 별도 디렉토리 분리가 필요 없습니다.

2. **언어와 카테고리 중심 관리**:
   - 사용한 언어(C, Java, Python 등)와 문제 유형(알고리즘/자료구조)에 따라 체계적으로 관리합니다.

3. **파일명 규칙**:
   - `플랫폼_문제ID_문제이름.확장자`
   - 예:
     - `Baekjoon_67890_Dijkstra.py`
     - `Programmers_11111_MST.java`

---

## 기여 가이드 (Contribution Guide)
1. **문제 풀이 기록**:
   - 매일 푼 문제를 해당 디렉토리에 추가하고 깃허브에 업로드합니다.
2. **커밋 메시지 규칙**:
   - `[언어] [카테고리] 플랫폼_문제ID_문제이름` 형식으로 작성.
   - 예: `[Python] [DynamicProgramming] Baekjoon_11111_Knapsack`
3. **코드 리뷰**:
   - 깃허브 PR(Pull Request)을 통해 코드 리뷰를 요청합니다.

---

## 목표
- 플랫폼에 상관없이 **언어와 카테고리 중심**으로 문제를 체계적으로 관리합니다.
- 플랫폼(백준, 프로그래머스 등)은 파일명을 통해 명확히 구분하여, 디렉토리 구조를 간소화합니다.
- 문제 풀이 기록을 통해 성장 과정을 추적하고, 깃허브를 통해 공유 및 피드백을 받습니다.
```

---

### **설계의 장점**
1. **간소화된 디렉토리 구조**:
   - 플랫폼 분리를 없애고 언어와 알고리즘/자료구조 중심으로 관리.
   - 불필요한 디렉토리 중복 제거.

2. **명확한 플랫폼 구분**:
   - 파일명에 플랫폼과 문제 ID를 포함해 출처를 명확히 구분.

3. **유연성과 확장성**:
   - 새로운 언어나 플랫폼 추가 시 간단히 파일명에 반영 가능.
